;;; Program to test type inference

(extern-proc add-int64 (-> Int64 Int64 Int64))
(extern-proc sub-int64 (-> Int64 Int64 Int64))
(extern-proc mul-int64 (-> Int64 Int64 Int64))
(extern-proc eq-int64 (-> Int64 Int64 Bool))



;;; Unordered function call dependencies.

;; To infer `main`, `id2` must be inferred, and to infer
;; `id2`, `id` must be inferred.

(define id2 (lambda (x) (id x)))

(define id (lambda (x) x))

;; (define main
;;   (lambda (real-world)
;;     (cons (id2 1337) real-world)))



;;; Direct recursion

(define fac
  (lambda (n)
    (if (eq-int64 n 0)
        1
        (mul-int64 n (fac (sub-int64 n 1))))))

;; (define main
;;   (lambda (real-world)
;;     (cons (fac 5) real-world)))



;;; Indirect recursion (mutual recursion)

(define indirect-1
  (lambda (n)
    (if (eq-int64 n 0)
        1
        (add-int64 1 (indirect-2 (sub-int64 n 1))))))

(define indirect-2
  (lambda (n)
    (mul-int64 2 (indirect-1 n))))

;; (define main
;;   (lambda (real-world)
;;     (cons (indirect-1 5) real-world)))



;;; Mutual recursion and polymorphism in let

(define main
  (lambda (real-world)
    (let ((id-1 (lambda (n x)
                  (if (eq-int64 n 0)
                      x
                      (id-2 n x))))
          (id-2 (lambda (n x)
                  (let ((n1 (sub-int64 n 1)))
                    (if (eq-int64 n 5)
                        (id-2 n1 x)
                        (id-1 n1 x))))))
      (cons (id-2 10 1337) real-world))))
