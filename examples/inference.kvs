;;; Program to test type inference



;; External declarations

(extern add-int (-> (Cons Int Int) Int))
(extern sub-int (-> (Cons Int Int) Int))
(extern mul-int (-> (Cons Int Int) Int))
(extern eq-int (-> (Cons Int Int) Bool))

(extern printInt (-> Int Nil))


;;; Unordered function call dependencies and polymorphism
;;;
;;; To infer `main`, `id2` must be inferred, and to infer
;;; `id2`, `id` must be inferred. `id2` must be inferred to
;;; `(-> a a)` and instantiated to `(-> Int Int)` at application
;;; in `main`

(define id2 (lambda (x) (id x)))

(define id (lambda (x) x))

(define main-unordered
  (: (lambda (_)
       (printInt (id2 1337)))
     (-> Nil Nil)))



;;; Polymorphic function and concrete function as argument
;;; to polymorphic procedure. Instantiation of function
;;; for arguments, and of arguments for function.
;;;
;;; `apply1` must be instantiated to
;;; `(-> (-> Int Int) Int Int)` in `(apply1 inc 9)`,
;;; and `id` must be instantiated to
;;; `(-> Int Int)` in `(apply1 id ...)`

;; (-> (-> a b) a b)
(define apply1
  (lambda (f v)
    (f v)))

(define inc
  (lambda (x)
    (add-int (cons x 1))))

(define main-poly
  (: (lambda (_)
       (printInt (apply1 id (apply1 inc 9))))
     (-> Nil Nil)))



;;; Direct recursion

(define fac
  (lambda (n)
    (if (eq-int (cons n 0))
        1
        (mul-int (cons n (fac (sub-int (cons n 1))))))))

(define main-direct
  (: (lambda (_)
       (printInt (fac 5)))
     (-> Nil Nil)))



;;; Indirect recursion (mutual recursion)

(define indirect-1
  (lambda (n)
    (if (eq-int (cons n 0))
        1
        (add-int (cons 1 (indirect-2 (sub-int (cons n 1))))))))

(define indirect-2
  (lambda (n)
    (mul-int (cons 2 (indirect-1 n)))))

(define main-indirect
  (: (lambda (_)
       (printInt (indirect-1 5)))
     (-> Nil Nil)))



;;; Mutual recursion and polymorphism in let

(define main-indirect-let
  (: (lambda (_)
       (let ((id-1 (lambda (n x)
                     (if (eq-int (cons n 0))
                         x
                         (id-2 n x))))
             (id-2 (lambda (n x)
                     (let ((n1 (sub-int (cons n 1))))
                       (if (eq-int (cons n 5))
                           (id-2 n1 x)
                           (id-1 n1 x))))))
         (printInt (id-2 10 1337))))
     (-> Nil Nil)))
