; Macro tests

;(def-macro swap (and)
;  ((xs ... x and y ys ...) (pair (list x xs ...) (list ys ... y))))
;(swap 1 2 3 and a b c) ; (pair (list 3 1 2) (list b c a))

;(def-macro zip ()
;  (((xs ...) (ys ...)) (list (pair xs ys) ...)))
;(zip (1 2 3) (a b c)) ; (list (pair 1 a) (pair 2 b) (pair 3 c))

; (def-macro operation-all ()
;     ((op-name op)
;      (def-macro op-name ()
;         ((name x)
;          (def-macro name ()
;             ((ys (... (... ...))) (list (op x ys) (... (... ...)))))))))

; (operation-all multiply-all *)
; (operation-all add-all +)

; (multiply-all quadruple-all 4)
; (add-all inc-all 1)

; Macros

(def-macro define ()
    (((proc params ...) body)
     (def-const proc (lambda (params ...) body)))
    (((proc params ...) body ...)
     (define (proc params ...) (block body ...)))
    ((const val)
     (def-const const val))
    ((const vals ...)
     (def-const const (begin vals ...))))

(define (main)
    (+ 1 2)
    (- 3 6))
