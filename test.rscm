; Macro tests

;(def-macro swap (and)
;  ((xs ... x and y ys ...) (pair (list x xs ...) (list ys ... y))))
;(swap 1 2 3 and a b c) ; (pair (list 3 1 2) (list b c a))

;(def-macro zip ()
;  (((xs ...) (ys ...)) (list (pair xs ys) ...)))
;(zip (1 2 3) (a b c)) ; (list (pair 1 a) (pair 2 b) (pair 3 c))

; (def-macro operation-all ()
;     ((op-name op)
;      (def-macro op-name ()
;         ((name x)
;          (def-macro name ()
;             ((ys (... (... ...))) (list (op ys x) (... (... ...)))))))))

; (operation-all multiply-all *)
; (operation-all divide-all /)
; (operation-all add-all +)
; (operation-all subtract-all -)

; (multiply-all quintuple-all 4)
; (divide-all halve-all 2)
; (add-all inc-all 1)
; (subtract-all dec-all 1)

; Macros

(def-macro def-proc ()
    (((proc params ...) body)
     (def-const proc (lambda (params ...) body)))
    ((head bodys ...)
     (def-proc head (block bodys ...))))

; Constants

(def-proc (unused-1 a b c) (+ a b c))
(def-const unused-2 a)

(def-proc (main)
    (+ 1 2)
    ())
