(--def-const dec (lambda (n) (- n 1)))
(--def-const inc (lambda (n) (+ n 1)))

;(--def-const if_ (lambda (predicate consequence otherwise)
;    (cond (predicate consequence)
;          (else otherwise))))

(--def-const fib (lambda (n)
    (cond ((= n 0) 0)
          ((= n 1) 1)
          (else (+ (fib (- n 1)) (fib (- n 2)))))))

;(--def-const neg (lambda (x) (- 0 x)))
;
;(--def-const or (lambda (a b)
;    (cond (a true)
;          (b true)
;          (else false))))
;
;(--def-const gteq (lambda (a b) (or (> a b) (= a b))))
;
;(--def-const max (lambda (a b)
;    (if_ (gteq a b)
;         a
;         b)))

(--def-const (:<â†’ ()> main) (lambda () (println! "{}" (fib 5))))
